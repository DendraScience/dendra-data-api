// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.5
// source: v3/datapoints.proto

package v3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DatapointsService_StreamDatapoints_FullMethodName = "/v3.DatapointsService/StreamDatapoints"
)

// DatapointsServiceClient is the client API for DatapointsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatapointsServiceClient interface {
	StreamDatapoints(ctx context.Context, in *StreamDatapointsRequest, opts ...grpc.CallOption) (DatapointsService_StreamDatapointsClient, error)
}

type datapointsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatapointsServiceClient(cc grpc.ClientConnInterface) DatapointsServiceClient {
	return &datapointsServiceClient{cc}
}

func (c *datapointsServiceClient) StreamDatapoints(ctx context.Context, in *StreamDatapointsRequest, opts ...grpc.CallOption) (DatapointsService_StreamDatapointsClient, error) {
	stream, err := c.cc.NewStream(ctx, &DatapointsService_ServiceDesc.Streams[0], DatapointsService_StreamDatapoints_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &datapointsServiceStreamDatapointsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DatapointsService_StreamDatapointsClient interface {
	Recv() (*StreamDatapointsResponse, error)
	grpc.ClientStream
}

type datapointsServiceStreamDatapointsClient struct {
	grpc.ClientStream
}

func (x *datapointsServiceStreamDatapointsClient) Recv() (*StreamDatapointsResponse, error) {
	m := new(StreamDatapointsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DatapointsServiceServer is the server API for DatapointsService service.
// All implementations must embed UnimplementedDatapointsServiceServer
// for forward compatibility
type DatapointsServiceServer interface {
	StreamDatapoints(*StreamDatapointsRequest, DatapointsService_StreamDatapointsServer) error
	mustEmbedUnimplementedDatapointsServiceServer()
}

// UnimplementedDatapointsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDatapointsServiceServer struct {
}

func (UnimplementedDatapointsServiceServer) StreamDatapoints(*StreamDatapointsRequest, DatapointsService_StreamDatapointsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamDatapoints not implemented")
}
func (UnimplementedDatapointsServiceServer) mustEmbedUnimplementedDatapointsServiceServer() {}

// UnsafeDatapointsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatapointsServiceServer will
// result in compilation errors.
type UnsafeDatapointsServiceServer interface {
	mustEmbedUnimplementedDatapointsServiceServer()
}

func RegisterDatapointsServiceServer(s grpc.ServiceRegistrar, srv DatapointsServiceServer) {
	s.RegisterService(&DatapointsService_ServiceDesc, srv)
}

func _DatapointsService_StreamDatapoints_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamDatapointsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DatapointsServiceServer).StreamDatapoints(m, &datapointsServiceStreamDatapointsServer{stream})
}

type DatapointsService_StreamDatapointsServer interface {
	Send(*StreamDatapointsResponse) error
	grpc.ServerStream
}

type datapointsServiceStreamDatapointsServer struct {
	grpc.ServerStream
}

func (x *datapointsServiceStreamDatapointsServer) Send(m *StreamDatapointsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DatapointsService_ServiceDesc is the grpc.ServiceDesc for DatapointsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatapointsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v3.DatapointsService",
	HandlerType: (*DatapointsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamDatapoints",
			Handler:       _DatapointsService_StreamDatapoints_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v3/datapoints.proto",
}
