// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.5
// source: v3/converter.proto

package v3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConverterService_ConvertMany_FullMethodName = "/v3.ConverterService/ConvertMany"
)

// ConverterServiceClient is the client API for ConverterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConverterServiceClient interface {
	ConvertMany(ctx context.Context, in *ConvertManyRequest, opts ...grpc.CallOption) (*ConvertManyResponse, error)
}

type converterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConverterServiceClient(cc grpc.ClientConnInterface) ConverterServiceClient {
	return &converterServiceClient{cc}
}

func (c *converterServiceClient) ConvertMany(ctx context.Context, in *ConvertManyRequest, opts ...grpc.CallOption) (*ConvertManyResponse, error) {
	out := new(ConvertManyResponse)
	err := c.cc.Invoke(ctx, ConverterService_ConvertMany_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConverterServiceServer is the server API for ConverterService service.
// All implementations must embed UnimplementedConverterServiceServer
// for forward compatibility
type ConverterServiceServer interface {
	ConvertMany(context.Context, *ConvertManyRequest) (*ConvertManyResponse, error)
	mustEmbedUnimplementedConverterServiceServer()
}

// UnimplementedConverterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConverterServiceServer struct {
}

func (UnimplementedConverterServiceServer) ConvertMany(context.Context, *ConvertManyRequest) (*ConvertManyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertMany not implemented")
}
func (UnimplementedConverterServiceServer) mustEmbedUnimplementedConverterServiceServer() {}

// UnsafeConverterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConverterServiceServer will
// result in compilation errors.
type UnsafeConverterServiceServer interface {
	mustEmbedUnimplementedConverterServiceServer()
}

func RegisterConverterServiceServer(s grpc.ServiceRegistrar, srv ConverterServiceServer) {
	s.RegisterService(&ConverterService_ServiceDesc, srv)
}

func _ConverterService_ConvertMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConverterServiceServer).ConvertMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConverterService_ConvertMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConverterServiceServer).ConvertMany(ctx, req.(*ConvertManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConverterService_ServiceDesc is the grpc.ServiceDesc for ConverterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConverterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v3.ConverterService",
	HandlerType: (*ConverterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConvertMany",
			Handler:    _ConverterService_ConvertMany_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v3/converter.proto",
}
