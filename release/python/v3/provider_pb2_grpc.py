# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from v3 import provider_pb2 as v3_dot_provider__pb2


class ProviderServiceStub(object):
    """NOTES:
    rpc GetAggregate (range | count, sum, min and max)
    rpc GetDatapoint (range | sort)
    rpc StreamAggregates (range | sort | interval | count, max, min, sum)
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamDatapoints = channel.unary_stream(
                '/v3.ProviderService/StreamDatapoints',
                request_serializer=v3_dot_provider__pb2.ProviderStreamDatapointsRequest.SerializeToString,
                response_deserializer=v3_dot_provider__pb2.ProviderStreamDatapointsResponse.FromString,
                )


class ProviderServiceServicer(object):
    """NOTES:
    rpc GetAggregate (range | count, sum, min and max)
    rpc GetDatapoint (range | sort)
    rpc StreamAggregates (range | sort | interval | count, max, min, sum)
    """

    def StreamDatapoints(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProviderServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamDatapoints': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamDatapoints,
                    request_deserializer=v3_dot_provider__pb2.ProviderStreamDatapointsRequest.FromString,
                    response_serializer=v3_dot_provider__pb2.ProviderStreamDatapointsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'v3.ProviderService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ProviderService(object):
    """NOTES:
    rpc GetAggregate (range | count, sum, min and max)
    rpc GetDatapoint (range | sort)
    rpc StreamAggregates (range | sort | interval | count, max, min, sum)
    """

    @staticmethod
    def StreamDatapoints(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/v3.ProviderService/StreamDatapoints',
            v3_dot_provider__pb2.ProviderStreamDatapointsRequest.SerializeToString,
            v3_dot_provider__pb2.ProviderStreamDatapointsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
