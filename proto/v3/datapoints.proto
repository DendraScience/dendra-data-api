syntax = "proto3";

package v3;

option go_package = "github.com/dendrascience/dendra-data-api/release/go/v3";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "v3/types.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Dendra Datapoints API";
    version: "3.0";
    contact: {
      url: "https://dendra.science/about";
      email: "metahuman@dendra.science";
    };
    license: {
      name: "BSD-3-Clause";
      url: "https://opensource.org/licenses/BSD-3-Clause";
    };
  };
  host: "localhost:8051";
  schemes: HTTP;
  schemes: HTTPS;
  schemes: WSS;
  consumes: "application/json";
  produces: "application/json";
};

service DatapointsService {
  rpc StreamAggregates (StreamAggregatesRequest) returns (stream StreamAggregatesResponse) {}

  rpc StreamDatapoints (StreamDatapointsRequest) returns (stream StreamDatapointsResponse) {
    option (google.api.http) = {
      get: "/v3/datapoints";
    };
  }
}

message StreamAggregatesRequest {
  // TODO: add auth token!

  string datastream_id = 1;
  DatapointsQuery query = 2;
  ConvertArgs convert = 3;

  string bucket_width = 4;
  bool count_only = 5;
  // TODO: Do we need this?
  // bool use_utc = 6;
}

message StreamAggregatesResponse {
  repeated Aggregate aggregates = 1;
}

message StreamDatapointsRequest {
  // TODO: add auth token!

  string datastream_id = 1;
  DatapointsQuery query = 2;
  ConvertArgs convert = 3;
}

message StreamDatapointsResponse {
  repeated Datapoint datapoints = 1;
}
